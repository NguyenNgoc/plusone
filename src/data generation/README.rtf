{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww21720\viewh13620\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 documents.py usage:\
to see full usage, run "python documents.py -h"\
\
to run from the command line:\
python documents.py -k num_topics -n num_docs -l words_per_doc -m vocab_size -s noise (-plsi)\
\
\pard\pardeftab720\ql\qnatural
\cf0 num_topics (4): \
	the number of underlying latent topics\
num_docs (20): \
	the number of documents to generate\
words_per_doc (50): \
	parameter to a Poisson distribution;\
	determines the average words in a documents\
vocab_size (30): \
	the number of words in the vocabulary\
alpha (all 1's): \
	parameters to dirichlet distribution for topics\
beta (all 1's): \
	parameters to dirichlet distribution for words\
noise (0): \
	given as a probability; each word will be replaced with a\
	random word with noise probability\
plsi (false):\
	flag to determine which distribution to draw from,\
	a random distribution or a sample from a dirichlet distribution\
\
The default parameters are noted in parentheses\
\
EXAMPLE:\
python documents.py -k 12 -n 100 -l 50 -m 1000 -plsi\
will generate 100 documents according to the plsi model; each document will have on average 50 words,\
the vocabulary will consist of 1000 unique words, and there will be 12 underlying latent topics\
\
TODO: handle alpha and beta arguments from the command line\
\
\
\
ratings.py usage\
to see full usage, run "python ratings.py -h"\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural
\cf0 to run from the command line:\
python ratings.py -k num_types -n num_users -l ratings_per_user -m num_items -s noise (-plsi)\
\
\pard\pardeftab720\ql\qnatural
\cf0 num_types (10): \
	the number of underlying latent user types\
num_users (100): \
	the number of users (with their ratings) to generate\
ratings_per_user (20): \
	parameter to a Poisson distribution;\
	determines the average number of ratings a user will have\
num_items (100): \
	the number of items to be rated\
alpha (all 1's): \
	parameters to dirichlet distribution for user type distributions\
noise (0): \
	given as a probability; each item's rating will be replaced with a\
	random rating with noise probability\
plsi (false):\
	flag to determine which distribution to draw from,\
	a random distribution or a sample from a dirichlet distribution\
\
The default parameters are noted in parentheses\
\
EXAMPLE:\
python documents.py -k 10 -n 100 -l 20 -m 100 -plsi\
will generate 100 users according to the plsi model; each user will have on average 20 ratings,\
there will be 100 different items to rate, and there will be 10 underlying latent user types\
\
TODO: handle alpha arguments from the command line}